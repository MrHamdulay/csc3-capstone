log2(N) is about the expected number of 
sprobes in an average successful search, 
sand the worst case is log2(N), just one 
smore probe. If the list is empty, no 
sprobes at all are made. Thus binary 
ssearch is a logarithmic algorithm and 
sexecutes in O(logN) time. In most cases 
sit is considerably faster than a linear 
ssearch. It can be implemented using 
siteration, or recursion. In some 
slanguages it is more elegantly expressed
recursively; however, in some C-based 
slanguages tail recursion is not 
seliminated and the recursive version 
srequires more stack space. Binary search
can interact poorly with the memory 
shierarchy (i.e. caching), because of its
random-access nature. For in-memory 
ssearching, if the span to be searched is
small, a linear search may have superior
performance simply because it exhibits 
sbetter locality of reference. For 
sexternal searching, care must be taken 
sor each of the first several probes will
lead to a disk seek. A common method is 
sto abandon binary searching for linear 
ssearching as soon as the size of the 
sremaining span falls below a small value
such as 8 or 16 or even more in recent 
scomputers. The exact value depends 
sentirely on the machine running the 
salgorithm. Notice that for multiple 
ssearches with a fixed value for N, then 
s(with the appropriate regard for integer
division), the first iteration always 
sselects the middle element at N/2, and 
sthe second always selects either N/4 or 
s3N/4, and so on. Thus if the array's key
values are in some sort of slow storage 
s(on a disc file, in virtual memory, not 
sin the cpu's on-chip memory), keeping 
sthose three keys in a local array for a 
sspecial preliminary search will avoid 
saccessing widely separated memory. 
sEscalating to seven or fifteen such 
svalues will allow further levels at not 
smuch cost in storage. On the other hand,
if the searches are frequent and not 
sseparated by much other activity, the 
scomputer's various storage control 
sfeatures will more or less automatically
promote frequently-accessed elements 
sinto faster storage. When multiple 
sbinary searches are to be performed for 
sthe same key in related lists, 
sfractional cascading can be used to 
sspeed up successive searches after the 
sfirst one. 